// Generated by CoffeeScript 1.6.3
(function() {
    var __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        function ctor() {
            this.constructor = child;
        }
        for (var key in parent) __hasProp.call(parent, key) && (child[key] = parent[key]);
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child;
    };
    define("X.Animate", function() {
        var Animate;
        Animate = function(start, end, duration, easing, callback, complete) {
            var animationRequestId, current, difference, easingFunc, lastTime, overclocked, pause, pauseStart, paused, resume, startTime, startValue, step, stop;
            duration == null && (duration = 0);
            easingFunc = Animate.easing[easing] || Animate.easing.swing;
            startValue = start;
            difference = end - start;
            current = start;
            startTime = Date.now();
            pauseStart = startTime;
            paused = !0;
            animationRequestId = void 0;
            lastTime = Date.now();
            pause = function() {
                if (paused) return;
                paused = !0;
                cancelAnimationFrame(animationRequestId);
                return pauseStart = Date.now();
            };
            stop = function() {
                return pause();
            };
            resume = function() {
                if (!paused) return;
                paused = !1;
                startTime += Date.now() - pauseStart;
                return animationRequestId = requestAnimationFrame(step);
            };
            overclocked = function() {
                return !1;
            };
            step = function() {
                var currentTime, x;
                currentTime = Date.now() - startTime;
                x = 1 - (duration - currentTime) / duration;
                if (currentTime < duration && !paused) {
                    if (!overclocked()) {
                        current = easingFunc(x, currentTime, start, difference, duration);
                        callback && callback(current);
                        lastTime = Date.now();
                    }
                    return animationRequestId = requestAnimationFrame(step);
                }
                current = easingFunc(x, duration, start, difference, duration);
                callback && callback(end);
                return complete && complete();
            };
            resume();
            return {
                resume: resume,
                pause: pause,
                stop: stop
            };
        };
        Animate.easing = {
            linear: function(x, t, b, c, d) {
                return b + x * c;
            },
            swing: function(x, t, b, c, d) {
                return b + (.5 - Math.cos(x * Math.PI) / 2) * c;
            },
            easeInQuad: function(x, t, b, c, d) {
                return c * (t /= d) * t + b;
            },
            easeOutQuad: function(x, t, b, c, d) {
                return -c * (t /= d) * (t - 2) + b;
            },
            easeInOutQuad: function(x, t, b, c, d) {
                return (t /= d / 2) < 1 ? c / 2 * t * t + b : -c / 2 * (--t * (t - 2) - 1) + b;
            },
            easeInCubic: function(x, t, b, c, d) {
                return c * (t /= d) * t * t + b;
            },
            easeOutCubic: function(x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t + 1) + b;
            },
            easeInOutCubic: function(x, t, b, c, d) {
                return (t /= d / 2) < 1 ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;
            },
            easeInQuart: function(x, t, b, c, d) {
                return c * (t /= d) * t * t * t + b;
            },
            easeOutQuart: function(x, t, b, c, d) {
                return -c * ((t = t / d - 1) * t * t * t - 1) + b;
            },
            easeInOutQuart: function(x, t, b, c, d) {
                return (t /= d / 2) < 1 ? c / 2 * t * t * t * t + b : -c / 2 * ((t -= 2) * t * t * t - 2) + b;
            },
            easeInQuint: function(x, t, b, c, d) {
                return c * (t /= d) * t * t * t * t + b;
            },
            easeOutQuint: function(x, t, b, c, d) {
                return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
            },
            easeInOutQuint: function(x, t, b, c, d) {
                return (t /= d / 2) < 1 ? c / 2 * t * t * t * t * t + b : c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
            },
            easeInSine: function(x, t, b, c, d) {
                return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
            },
            easeOutSine: function(x, t, b, c, d) {
                return c * Math.sin(t / d * (Math.PI / 2)) + b;
            },
            easeInOutSine: function(x, t, b, c, d) {
                return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
            },
            easeInExpo: function(x, t, b, c, d) {
                var _ref;
                return (_ref = t === 0) != null ? _ref : {
                    b: c * Math.pow(2, 10 * (t / d - 1)) + b
                };
            },
            easeOutExpo: function(x, t, b, c, d) {
                var _ref;
                return (_ref = t === d) != null ? _ref : b + {
                    c: c * (-Math.pow(2, -10 * t / d) + 1) + b
                };
            },
            easeInOutExpo: function(x, t, b, c, d) {
                return t === 0 ? b : t === d ? b + c : (t /= d / 2) < 1 ? c / 2 * Math.pow(2, 10 * (t - 1)) + b : c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
            },
            easeInCirc: function(x, t, b, c, d) {
                return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
            },
            easeOutCirc: function(x, t, b, c, d) {
                return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
            },
            easeInOutCirc: function(x, t, b, c, d) {
                return (t /= d / 2) < 1 ? -c / 2 * (Math.sqrt(1 - t * t) - 1) + b : c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
            },
            easeInElastic: function(x, t, b, c, d) {
                var a, p, s;
                s = 1.70158;
                p = 0;
                a = c;
                if (t === 0) return b;
                if ((t /= d) === 1) return b + c;
                p || (p = d * .3);
                if (a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                } else s = p / (2 * Math.PI) * Math.asin(c / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * 2 * Math.PI / p)) + b;
            },
            easeOutElastic: function(x, t, b, c, d) {
                var a, p, s;
                s = 1.70158;
                p = 0;
                a = c;
                if (t === 0) return b;
                if ((t /= d) === 1) return b + c;
                p || (p = d * .3);
                if (a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                } else s = p / (2 * Math.PI) * Math.asin(c / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * 2 * Math.PI / p) + c + b;
            },
            easeInOutElastic: function(x, t, b, c, d) {
                var a, p, s;
                s = 1.70158;
                p = 0;
                a = c;
                if (t === 0) return b;
                if ((t /= d / 2) === 2) return b + c;
                p || (p = d * .3 * 1.5);
                if (a < Math.abs(c)) {
                    a = c;
                    s = p / 4;
                } else s = p / (2 * Math.PI) * Math.asin(c / a);
                return t < 1 ? -0.5 * a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * 2 * Math.PI / p) + b : a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * 2 * Math.PI / p) * .5 + c + b;
            },
            easeInBack: function(x, t, b, c, d, s) {
                s == null && (s = 1.70158);
                return c * (t /= d) * t * ((s + 1) * t - s) + b;
            },
            easeOutBack: function(x, t, b, c, d, s) {
                s == null && (s = 1.70158);
                return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
            },
            easeInOutBack: function(x, t, b, c, d, s) {
                s == null && (s = 1.70158);
                return (t /= d / 2) < 1 ? c / 2 * t * t * (((s *= 1.525) + 1) * t - s) + b : c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
            },
            easeInBounce: function(x, t, b, c, d) {
                return c - Animate.easing.easeOutBounce(x, d - t, 0, c, d) + b;
            },
            easeOutBounce: function(x, t, b, c, d) {
                return (t /= d) < 1 / 2.75 ? c * 7.5625 * t * t + b : t < 2 / 2.75 ? c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b : t < 2.5 / 2.75 ? c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b : c * (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b;
            },
            easeInOutBounce: function(x, t, b, c, d) {
                return t < d / 2 ? Animate.easing.easeInBounce(x, t * 2, 0, c, d) * .5 + b : Animate.easing.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;
            }
        };
        return Animate;
    });
    define("X.Element", [ "X.Model", "X.Collection", "X.Animate" ], function(Model, Collection, Animate) {
        var Element, _ref;
        return Element = function(_super) {
            function Element() {
                _ref = Element.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(Element, _super);
            Element.prototype.defaults = {
                fillColor: "transparent",
                fillOpacity: 1,
                strokeColor: "transparent",
                strokeWidth: 0,
                strokeCap: "round",
                strokeOpacity: 1
            };
            Element.prototype.initialize = function() {
                return this.elements = new Collection;
            };
            Element.prototype.add = function(models) {
                var model, _i, _len;
                typeof models != "object" && !models.length && (models = [ models ]);
                for (_i = 0, _len = models.length; _i < _len; _i++) {
                    model = models[_i];
                    model.canvas(this._canvas).trigger("create");
                }
                this.elements.add(models);
                return this;
            };
            Element.prototype.remove = function(models) {
                this.elements.remove(models);
                return this;
            };
            Element.prototype.select = function(type) {
                var collection;
                collection = new Collection;
                return collection.add(this.elements.where({
                    type: type
                }));
            };
            Element.prototype.last = function() {
                return this.elements.last();
            };
            Element.prototype.empty = function() {
                this.elements.reset();
                return this;
            };
            Element.prototype.animate = function(options, duration, easing, callback) {
                var end, start, _this = this;
                duration = duration || 400;
                for (start in options) {
                    end = options[start];
                    this._canvas.animate();
                    this._animation = Animate(this.get(start), end, duration, easing, function(c) {
                        var o;
                        o = {};
                        o[start] = c;
                        return _this.set(o);
                    }, function() {
                        _this._canvas.animated();
                        return delete _this._animation;
                    });
                }
                return this;
            };
            Element.prototype.stop = function() {
                this._animation != null && this._animation.stop();
                delete this._animation;
                return this;
            };
            return Element;
        }(Model);
    });
    define("X.Point", [ "X.Element" ], function(Element) {
        var Point, _ref;
        return Point = function(_super) {
            function Point() {
                _ref = Point.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(Point, _super);
            Point.prototype.defaults = {
                type: "point",
                x: 0,
                y: 0,
                r: 5,
                fillColor: "transparent",
                fillOpacity: 1,
                strokeColor: "transparent",
                strokeWidth: 0,
                strokeCap: "round",
                strokeOpacity: 1
            };
            return Point;
        }(Element);
    });
    define("X.Shape", [ "X.Element" ], function(Element) {
        var Shape, _ref;
        return Shape = function(_super) {
            function Shape() {
                _ref = Shape.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(Shape, _super);
            Shape.prototype.defaults = {
                type: "shape",
                fillColor: "transparent",
                fillOpacity: 1,
                strokeColor: "transparent",
                strokeWidth: 0,
                strokeCap: "round",
                strokeOpacity: 1
            };
            return Shape;
        }(Element);
    });
    define("X.Canvas", [ "X.Element", "X.Canvas.Renderer" ], function(Element, Renderer) {
        var Canvas, _ref;
        return Canvas = function(_super) {
            function Canvas() {
                _ref = Canvas.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(Canvas, _super);
            Canvas.prototype.defaults = {
                width: void 0,
                height: void 0,
                animating: 0,
                opacity: 1,
                fillColor: "transparent",
                fillOpacity: 1,
                strokeColor: "transparent",
                strokeWidth: 0,
                strokeCap: "round",
                strokeOpacity: 1
            };
            Canvas.prototype.initialize = function() {
                Canvas.__super__.initialize.apply(this, arguments);
                new Renderer({
                    model: this
                });
                this.on("render", this.render);
                return this.on("change:animating", this.animating);
            };
            Canvas.prototype.animate = function() {
                return this.set({
                    animating: this.get("animating") + 1
                });
            };
            Canvas.prototype.animated = function() {
                return this.set({
                    animating: this.get("animating") - 1
                });
            };
            Canvas.prototype.animating = function() {
                if (this.get("animating") && !this.previous("animating")) return this.trigger("render");
            };
            Canvas.prototype.render = function() {
                var _this = this;
                this.elements.each(function(m) {
                    _this.set(m.attributes);
                    return m.trigger("render", _this);
                });
                if (this.get("animating")) return requestAnimationFrame(function() {
                    return _this.trigger("render");
                });
            };
            Canvas.prototype.refresh = function() {
                return this.animate().animated();
            };
            return Canvas;
        }(Element);
    });
    define("X.Canvas.Renderer", [ "X.View" ], function(View) {
        var CanvasView, _ref;
        return CanvasView = function(_super) {
            function CanvasView() {
                _ref = CanvasView.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(CanvasView, _super);
            CanvasView.prototype.template = _.template('<canvas height="<%= height %>" width="<%= width %>"></canvas>');
            CanvasView.prototype.initialize = function() {
                this.model.on("create", this.create, this);
                this.model.on("render", this.render, this);
                this.model.on("change:opacity", this.opacity, this);
                this.model.on("change:strokeColor", this.strokeColor, this);
                this.model.on("change:strokeWidth", this.strokeWidth, this);
                this.model.on("change:strokeCap", this.strokeCap, this);
                this.model.on("beginPath", this.beginPath, this);
                this.model.on("moveTo", this.moveTo, this);
                this.model.on("lineTo", this.lineTo, this);
                this.model.on("arc", this.arc, this);
                this.model.on("closePath", this.closePath, this);
                this.model.on("fill", this.fill, this);
                return this.model.on("stroke", this.stroke, this);
            };
            CanvasView.prototype.create = function(container) {
                container.html(this.template(this.model.attributes));
                this.$el = container.find("canvas").last();
                this.x = this.$el[0].getContext("2d");
                return this.delegateEvents();
            };
            CanvasView.prototype.render = function() {
                return this.x.clearRect(0, 0, this.model.get("width"), this.model.get("height"));
            };
            CanvasView.prototype.opacity = function(a, b) {
                return this.x.globalAlpha = b;
            };
            CanvasView.prototype.strokeColor = function(a, b) {
                return this.x.strokeStyle = b;
            };
            CanvasView.prototype.strokeWidth = function(a, b) {
                return this.x.lineWidth = b;
            };
            CanvasView.prototype.strokeCap = function(a, b) {
                return this.x.lineCap = b;
            };
            CanvasView.prototype.beginPath = function() {
                return this.x.beginPath();
            };
            CanvasView.prototype.moveTo = function(x, y) {
                return this.x.moveTo(x, y);
            };
            CanvasView.prototype.lineTo = function(x, y) {
                return this.x.lineTo(x, y);
            };
            CanvasView.prototype.arc = function(x, y, r, a) {
                return this.x.arc(x, y, r, 0, a, !1);
            };
            CanvasView.prototype.closePath = function() {
                return this.x.closePath();
            };
            CanvasView.prototype.fill = function() {
                return this.x.fill();
            };
            CanvasView.prototype.stroke = function() {
                return this.x.stroke();
            };
            CanvasView.prototype.events = {
                click: function(e) {
                    e.preventDefault();
                    return this.model.trigger("click");
                }
            };
            return CanvasView;
        }(View);
    });
    define("X.Canvas.Point", [ "X.View" ], function(View) {
        var PointView, _ref;
        return PointView = function(_super) {
            function PointView() {
                _ref = PointView.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(PointView, _super);
            PointView.prototype.initialize = function() {
                return this.on("render", this.render, this);
            };
            PointView.prototype.render = function(canvas) {
                return canvas.trigger("beginPath arc fill closePath", this.model.get("x"), this.model.get("y"), this.model.get("r"), 2 * Math.PI);
            };
            return PointView;
        }(View);
    });
    define("X.Canvas.Shape", [ "X.View" ], function(View) {
        var ShapeView, _ref;
        return ShapeView = function(_super) {
            function ShapeView() {
                _ref = ShapeView.__super__.constructor.apply(this, arguments);
                return _ref;
            }
            __extends(ShapeView, _super);
            ShapeView.prototype.initialize = function() {
                return this.model.on("render", this.render, this);
            };
            ShapeView.prototype.render = function(canvas) {
                var i, length, point, points, _i, _len;
                points = this.model.elements.select("point");
                length = points.length - 1;
                canvas.trigger("beginPath");
                for (i = _i = 0, _len = points.length; _i < _len; i = ++_i) {
                    point = points[i];
                    if (i === 0) canvas.trigger("moveTo", point.get("x"), point.get("y")); else if (i !== length) canvas.trigger("lineTo", point.get("x"), point.get("y")); else {
                        canvas.trigger("lineTo", point.get("x"), point.get("y"));
                        canvas.trigger("lineTo", points[0].get("x"), points[0].get("y"));
                    }
                }
                return canvas.trigger("fill closePath");
            };
            return ShapeView;
        }(View);
    });
    define("X", [ "X.Animate", "X.Element", "X.Point", "X.Shape", "X.Canvas" ], function(Animate, Element, Point, Shape, Canvas) {
        return {
            Animate: Animate,
            Element: Element,
            Point: Point,
            Shape: Shape,
            Canvas: Canvas
        };
    });
}).call(this);